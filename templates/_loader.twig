{# ////////////////////////////////////////////////////////////////////////// #}
{# Loader                                                                     #}
{# ////////////////////////////////////////////////////////////////////////// #}

{# What does this do? ==========================================================

   The princible for this loader is to allow entries to point to a template
   respective of the URI stucture, whilst also offering a number of fallbacks
   should the URI not meet the correct format.

   Essentially making it very reliable for a template to always be found and
   allowing all pages to work with very little intervention via the CMS.

	 This does NOT supersede 404 errors. If a page doesn't exist in the CMS a
	 404 will be thrown as normal and without intervention.

============================================================================= #}

{% set _paths = [] %}

{% set segments = segments ?? craft.app.request.segments ?? false %}

{% set element = product ?? entry ?? category ?? tag ?? false %}

{# Multisite Handler -----------------------------------------------------------
If this a multisite, and the site handle isn't 'default', then add a variety
of additional template paths into the mix. #}

{% set isMultisite = false %}
{% set multisiteHandle = (isMultisite ?? false) and currentSite.handle != 'default' ? currentSite.handle ~ '/' : '' %}

{# If an element exists ----------------------------------------------------- #}

{% if element %}

	{% if element.uri == '__home__' %}
		{% set _paths = _paths|merge([
			multisiteHandle ~ 'home',
			multisiteHandle ~ 'index'
		]) %}
	{% endif %}

	{% if element.uri != '__home__' %}

		{% if product ?? false %}
			{% set _paths = _paths|merge([
				multisiteHandle ~ element.uri ~ '/' ~ '_product'
			]) %}
		{% endif %}

		{% set _paths = _paths|merge([
			multisiteHandle ~ element.uri,
			multisiteHandle ~ element.uri ~ '/' ~ '_entry'
		]) %}

		{% if element['section'] ?? false %}
			{% set _paths = _paths|merge([
				multisiteHandle ~ '_' ~ element.section.handle ~ '/' ~ segments|first,
				multisiteHandle ~ '_' ~ element.section.handle ~ '/' ~ segments|last,
				(segments is not empty ? multisiteHandle ~ '_' ~ element.section.handle ~ '/' ~ element.uri),
				multisiteHandle ~ '_' ~ element.section.handle ~ '/' ~ 'entry'
			]) %}
		{% endif %}

	{% endif %}

	{# If Segments exists ----------------------------------------------------- #}

	{% if segments is not empty %}

		{# If an entry type exists ---------------------------------------------- #}

		{% if element['type'] ?? false %}
			{% set _paths = _paths|merge([
				multisiteHandle ~ segments|first ~ '/' ~ segments|last,
				multisiteHandle ~ segments|first ~ '/_' ~ segments|last
			]) %}
			{% if element.type != segments|first %}
				{% set _paths = _paths|merge([
					multisiteHandle ~ segments|first ~ '/' ~ element.type|kebab,
					multisiteHandle ~ segments|first ~ '/_' ~ element.type|kebab,
				]) %}
			{% endif %}

			{% if multisiteHandle is not empty %}
				{% set _paths = _paths|merge([
					multisiteHandle ~ '_layouts/' ~ element.type|kebab,
					'global/_layouts/' ~ element.type|kebab
				]) %}
			{% else %}
				{% set _paths = _paths|merge(['_layouts/' ~ element.type|kebab]) %}
			{% endif %}

		{% endif %}

		{# If an element type exists -------------------------------------------- #}

		{% set elementType = craft.helpers.getElementType(element) ?? false %}
		{% if elementType %}
			{% set _paths = _paths|merge([multisiteHandle ~ segments|first ~ '/_' ~ elementType|kebab]) %}
		{% endif %}

	{% endif %}

{% endif %}

{# Add Routes as a priority if they match the current URI ------------------- #}

{% set routes = craft.helpers.routeRules() %}

{# {% for route, template in routes %}
	{% for r in route|split('/')  %}
		{% if r == "*" %}
			{{ loop.index }}
		{% endif %}
	{% endfor %}
{% endfor %} #}

{% if element and element.uri in routes|keys or element and element.uri == '__home__' and '' in routes|keys %}
	{% set _paths = [multisiteHandle ~ routes[element.uri == '__home__' ? '' : element.uri].template]|merge(_paths) %}
{% endif %}

{# Add last set if fallbacks ------------------------------------------------ #}

{% if multisiteHandle is not empty %}
	{% set _paths = _paths|merge([
		multisiteHandle ~ '_layouts/generic',
		multisiteHandle ~ '_layouts/master',
		'global/_layouts/generic',
		'global/_layouts/master'
	]) %}
{% else %}
	{% set _paths = _paths|merge(['_layouts/generic', '_layouts/master']) %}
{% endif %}

{# Final Checks ----------------------------------------------------------------
{# Finalise all the paths by ensuring they are all start with a forward slash #}

{% set paths = [] %}

{% for path in _paths %}
	{% set paths = paths|merge(['/' ~ path|trim('/', 'left')]) %}
{% endfor %}

{# List all possible paths -------------------------------------------------- #}

{# <pre>{{ dump(paths) }}</pre> #}

{# Extend the paths array --------------------------------------------------- #}

{% extends paths %}
