////////////////////////////////////////////////////////////////////////////////
// Global Styling
////////////////////////////////////////////////////////////////////////////////

// =============================================================================
// Imports
// =============================================================================

// Dependencies ----------------------------------------------------------------

@import "settings";

// Sections ------------------------------------------------------------------

@import "sections/main",
        "sections/header",
        "sections/footer",
        "sections/sidebar",
        "sections/navigation";

// Components ------------------------------------------------------------------

@import "components/social-media",
        "components/article";

// Miscellaneous ---------------------------------------------------------------

@import "layouts",
        "forms/all-forms";

// Pages -----------------------------------------------------------------------

@import "pages/home";

// =============================================================================
// Global styling
// =============================================================================

body {
  site-wrapper {
    display:flex;
    flex-direction:column;
    min-height: 100vh;
    min-width:$min;
    width:100%;
  }
  &.locked {
    --scrollbar-width : 0;
    overflow:hidden;
    height: 100vh;
    site-wrapper:before {
      @extend %sudo;
      position:fixed;
      background-color:col(white, 0.9);
      z-index:10;
    }
    @include devices(mobile tablet) {
      site-wrapper { height:inherit; }
    }
  }
	@include outside-break($min) {
		overflow-x:hidden;
	}
  @include selection(secondary);
	&.dev-environment {
		@include show-breakpoints();
	}
}

h1 { font-weight:bold; margin-bottom:$gap; color:$text-colour;}
h2, h3, h4, h5, h6 { margin-bottom:$gap0; color:$text-colour;}

h1, %h1 { @include responsive-fontsize($h1, $h2); }
h2, %h2 { @include responsive-fontsize($h2, $h3); }
h3, %h3 { @include responsive-fontsize($h3, $h4); }
h4, %h4 { @include responsive-fontsize($h4, $h5); }
h5, %h5 { @include responsive-fontsize($h5, $h6); }
h6, %h6 { @include responsive-fontsize($h6, $font-size); }

q, blockquote {
  quotes: "“" "”" "‘" "’";
  &:before { content: open-quote; }
  &:after { content: close-quote; }
}

a { @include transition(color); }

pre {
  background-color:white;
  color:black;
  text-transform:none;
  text-decoration:none;
  text-align:left;
  display:block;
  padding:$gap;
  position:relative;
  z-index:999;
}

// =============================================================================
// Logo
// =============================================================================

svg.logo {

}

.icon {

}

// =============================================================================
// Stylised List
// =============================================================================

%stylised-list {
	> ol, > ul { margin-bottom:$gap;
		li { position:relative; display:block; padding-left:20px;
			&:not(:last-of-type) { margin-bottom:5 + $gap0; }
			a { text-decoration:none;}
			&:before { color: var(primary); position:absolute; top:1px; left:0; }
		}
	}
	> ul li:before { content:$circle; }
	> ol { counter-reset: counter;
		> li:before {
			content: counter(counter)'.';
			counter-increment: counter;
			font-weight:bold;
		}
	}
}

// =============================================================================
// Buttons
// =============================================================================

// NOTE: See _layouts/stylesheet.twig for guidance on how to use these button styles.

.button {

	--button-theme:#{var(secondary)};

	&.inverse, &.white    { --button-theme : #{$white}; }
	&.black               { --button-theme : #{$black}; }
	&.red                 { --button-theme : #{$red}; }
	&.blue, &.blue1       { --button-theme : #{$blue1}; }
	&.blue2, &.blue-light { --button-theme : #{$blue3}; }
	&.pink                { --button-theme : #{$pink}; }
	&.purple              { --button-theme : #{$purple}; }
	&.grey                { --button-theme : #{$grey}; }
	&.yellow              { --button-theme : #{$yellow}; }
	&.green               { --button-theme : #{$green}; }

	position: relative;
	display:inline-flex;
	align-self: flex-start;
	align-items:center;
	padding:$gap0+2 $gap + 5;
	white-space:nowrap;
	text-transform: uppercase;
	font-size:16px; line-height:1;
	border:1px solid transparent;
	@extend .bold;
	@include border-radius;

	// Standard Button Colours
	@include button(
		$transitions : color background-color border-color,
		$initial:(
			'background' : var(button-theme),
			'colour'     : white,
			'stroke'     : white,
			'fill'       : white,
			'border'     : transparent,
		),
		$hover:(
			'background' : white,
			'colour'     : var(button-theme),
			'stroke'     : var(button-theme),
			'fill'       : var(button-theme),
			'border'     : var(button-theme),
			'important'  : true
		),
	);

	// Inverted Button Colours
	&.inverse {
		&:not(.white) {
			@include button(
				$transitions : color background-color border-color,
				$initial:(
					'background' : transparent,
					'colour'     : var(button-theme),
					'stroke'     : var(button-theme),
					'fill'       : var(button-theme),
					'border'     : var(button-theme)
				),
				$hover:(
					'background' : var(button-theme),
					'colour'     : white,
					'stroke'     : white,
					'fill'       : white,
					'border'     : transparent,
					'important'  : true
				),
			);
		}
		&.white {
			@include button(
				$initial:(
					'background' : transparent,
					'colour'     : white,
					'stroke'     : white,
					'fill'       : white,
					'border'     : white
				),
				$hover:(
					'background' : white,
					'colour'     : var(primary),
					'stroke'     : var(primary),
					'fill'       : var(primary),
					'important'  : true
				),
			);
		}
	}
	svg {
		margin-left:$gap0;
		&[class*="arrow-"]:not([class*="arrow-left"]) {	margin-left:$gap0 + 3; }
		&[class*="arrow-left"] { margin-left:0; margin-right:$gap0 + 3;	}
		@include transition(stroke fill);

		@if variable-exists(symbols) {
			@each $symbol, $settings in $symbols {
				&.icon-#{$symbol} {
					@if str-index($symbol, 'arrow-right') or str-index($symbol, 'arrow-left') {
						@include symbol-size($symbol:$symbol, $height:10px);
					}	@else if str-index($symbol, 'arrow-up') or str-index($symbol, 'arrow-down') {
						@include symbol-size($symbol:$symbol, $width:10px);
					} @else {
						@include symbol-size($symbol:$symbol, $height:14px);
					}
				}
			}
		}
	}
	&:hover svg[class*="arrow-"] {
		stroke:white;
	}
}

// Big Buttons -----------------------------------------------------------------

.button-big, .button.big {
	@extend .button;
	padding:$gap $gap2;
	font-size:20px;
	svg {
		margin-left:$gap;
		&[class*="arrow-"]:not([class*="arrow-left"]) {	margin-left:$gap; }
		&[class*="arrow-left"] { margin-left:0; margin-right:$gap;	}

		@if variable-exists(symbols) {
			@each $symbol, $settings in $symbols {
				&.icon-#{$symbol} {
					@if str-index($symbol, 'arrow-right') or str-index($symbol, 'arrow-left') {
						@include symbol-size($symbol:$symbol, $height:14px);
					}	@else if str-index($symbol, 'arrow-up') or str-index($symbol, 'arrow-down') {
						@include symbol-size($symbol:$symbol, $width:14px);
					} @else {
						@include symbol-size($symbol:$symbol, $height:20px);
					}
				}
			}
		}
	}

}

// Small Buttons ---------------------------------------------------------------

.button-small, .button.small {
	@extend .button;
	padding:$gap0 $gap;
	font-size:13px;
	svg {
		margin-left:$gap0;
		&[class*="arrow-"]:not([class*="arrow-left"]) {	margin-left:$gap0; }
		&[class*="arrow-left"] { margin-left:0; margin-right:$gap0;	}

		@if variable-exists(symbols) {
			@each $symbol, $settings in $symbols {
				&.icon-#{$symbol} {
					@if str-index($symbol, 'arrow-right') or str-index($symbol, 'arrow-left') {
						@include symbol-size($symbol:$symbol, $height:8px);
					}	@else if str-index($symbol, 'arrow-up') or str-index($symbol, 'arrow-down') {
						@include symbol-size($symbol:$symbol, $width:8px);
					} @else {
						@include symbol-size($symbol:$symbol, $height:11px);
					}
				}
			}
		}
	}
}

// Special Button
// Small flash is ommited when hovering over these special buttons

.button.special {
	@extend .button;
	@include button (
		$transitions : false,
		$initial:(
			'background' : $pink,
			'colour'     : white,
			'fill'       : white,
			'border'     : transparent
		),
		$hover:(
			'background' : $yellow,
			'colour'     : $blue,
			'border'     : transparent,
			'important'  : true
		),
	);
	&:before {
		@extend %sudo;
		background-color:white;
		opacity:0;
		@include border-radius;
	}
	&:hover {
		&:before {
			opacity:0.5;
			@include animate(0.3) {
				100% { @include scale(1.5 2); opacity:0; }
			}
		}
	}
}

div.buttons a {

	&:nth-of-type(1) { @extend .button; }
	&:nth-of-type(2) { @extend .button; }
	&:nth-of-type(3) { @extend .button; }
	&:nth-of-type(4) { @extend .button; }
	&:nth-of-type(5) { @extend .button.big; }
	&:nth-of-type(6) { @extend .button.big; }
	&:nth-of-type(7) { @extend .button.big; }
	&:nth-of-type(8) { @extend .button.big; }
	&:nth-of-type(9) { @extend .button-small; }
	&:nth-of-type(10) { @extend .button-small; }
	&:nth-of-type(11) { @extend .button-small; }
	&:nth-of-type(12) { @extend .button-small; }
	&:nth-of-type(13) { @extend .button; }
	&:nth-of-type(14) { @extend .button; }
	&:nth-of-type(15) { @extend .button; }
	&:nth-of-type(16) { @extend .button; }
	&:nth-of-type(17) { @extend .button-big; --button-theme:#E95838; }
	&:nth-of-type(18) { @extend .button-big; --button-theme:#E95838; }
	&:nth-of-type(19) { @extend .button-big, .yellow; }
	&:nth-of-type(20) { @extend .button-big; --button-theme:#E95838; }
	&:nth-of-type(21) { @extend .button-big, .special; }
	&:nth-of-type(22) { @extend .button-small, .green; }
	&:nth-of-type(23) { @extend .button-small, .green; }
	&:nth-of-type(24) { @extend .button-small, .green; }
	&:nth-of-type(25) { @extend .button-small, .green; }
	&:nth-of-type(26) { @extend .button-small, .green; }

}


// =============================================================================
// Images
// =============================================================================

%srcset-image {
  display:block;
  background-position:center 33%;
  background-size:cover;
	background-repeat:no-repeat;
  img {
    display:block;
    position:absolute;
    object-fit:cover;
    object-position:center 33.33%;
    width:100%; height:100%; max-width:100%; max-height:100%;
    top:0; left:0;
    @include browsers(ie, edge) { display:none; }
  }
}

%no-image {
	&[data-desktop*="default-"]:after {
		content:'No Image';
		content:attr(data-error);
		text-transform: uppercase;
		position:absolute;
		top:50%; left:50%;
		color:white;
		white-space:nowrap;
		font-weight:bold;
		opacity:0.5;
		@include text-shadow();
		@include transform(y -50%, x -50%);
	}
}

figure[image] {
	@extend %full, %srcset-image, %no-image;
}

// =============================================================================
// Video Container
// =============================================================================

video-container {
	padding-bottom:map-get($aspect-ratios, 16x10);
	display:block;
	position:relative;
	width:100%; height:auto;
	&[style*='background-image'] {
		background-position:center center;
		background-size: cover;
		background-repeat:no-repeat;
		background-color:black;
	}
	iframe, canvas {
		position:absolute;
		display:block;
		top:0; left:0;
		height:100% $imp; width:100% $imp;
	}
}

// =============================================================================
// Notch Devices
// =============================================================================

@if ( $support-notches ) {
  html[data-notch] {
    &[data-notch="left"]  body {  }
    &[data-notch="right"] body {  }
    &[data-notch="top"]   body {  }
  }
}

// =============================================================================
// Admin links
// =============================================================================

admin-links {
  @include flex-container(center center);
  a {
    display:block; font-size:smaller;
    &:hover { color: var(primary); }
    & + a { margin-left:$gap0; }
  }
}

// =============================================================================
// Error pages
// =============================================================================

body[id^='error'], body[id='holding-page'] {
  main {
    text-align:center;
		flex-grow:1;
    @include flex-container(column center center);
    @include container();
    svg.icon { position:absolute; opacity:0.1; }
    .back-button {
      @extend %button; @include button(primary white);
    }
  }
  footer { background:none; }
}

// =============================================================================
// Special styling for developers
// =============================================================================

body.devmode {
  img:not([alt]) {
    border: 2px red dashed;
  }
}

// =============================================================================
// Notifications
// =============================================================================

%notification-bar {
  content:var(--notification);
  position:relative;
  width:100%; display:block;
  text-align:center;
  font-size:18px; font-weight:bold; line-height:23px;
  color:white;
  padding:$gap0 $gap2;
  background-color : var(secondary);
  color:colour-contrast(secondary);
}

body {

  &.staging-environment.logged-in {
    --notification : "This is the staging site. Any changes to the CMS may not be transferabled to the live site.";
    site-wrapper:before {
      @extend %notification-bar;
      background-color:$yellow;
      color:colour-contrast($yellow);
    }
  }

  &.dev-environment:not(.devmode) {
    --notification : "You are in a developer environment, but Craft's devmode is switched off.";
    site-wrapper:before {
      @extend %notification-bar;
      background-color:$red;
      color:colour-contrast($red);
    }
  }

}
